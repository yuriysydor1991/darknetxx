#ifndef YOUR_CPP_APP_TEMPLATE_PROJECT_SIMPLE_LOGGER_IMPLEMENTATION_CLASS_H
#define YOUR_CPP_APP_TEMPLATE_PROJECT_SIMPLE_LOGGER_IMPLEMENTATION_CLASS_H

#include <atomic>
#include <fstream>
#include <mutex>
#include <string>

#include "project-global-decls.h"
#include "src/log/severity-macro-consts.h"

/**
 * @brief The simple logger quick implementation encapsulation namespace.
 */
namespace simple_logger
{

/**
 * @brief The simple logger class implementation. Replace it with log4cpp or
 * similar if necessary.
 */
class SimpleLogger
{
 public:
  inline static constexpr const unsigned short LVL_ERROR = MACRO_LVL_ERROR;
  inline static constexpr const unsigned short LVL_WARNING = MACRO_LVL_WARNING;
  inline static constexpr const unsigned short LVL_INFO = MACRO_LVL_INFO;
  inline static constexpr const unsigned short LVL_DEBUG = MACRO_LVL_DEBUG;
  inline static constexpr const unsigned short LVL_TRACE = MACRO_LVL_TRACE;

  inline static constexpr const char* const defaultLogDateFormat =
      "%Y-%m-%d %H:%M:%S";

  inline static const std::string default_log_name =
      project_decls::PROJECT_NAME + "-" + project_decls::PROJECT_BUILD_VERSION +
      ".log";

  virtual ~SimpleLogger() = default;
  SimpleLogger() = default;

  /**
   * @brief Perform a logging message.
   *
   * @param loglvl The level of the log message. The lower the value - more
   * urgent the message.
   * @param msg The actual message for the log file or just stdout stream.
   */
  static void log(const unsigned short& loglvl, const std::string& msg);

  /**
   * @brief Perform a logging message.
   *
   * @param loglvl The level of the log message. The lower the value - more
   * urgent the message.
   * @param filePath The file path of the source of the log message. Usually
   * it's the __FILE__ macro value.
   * @param fileLine The file line of the source of the log message. Usually
   * it's the __LINE__ macro value.
   * @param msg The actual message for the log file or just stdout stream.
   */
  static void log(const unsigned short& loglvl, const char* const filePath,
                  const int& fileLine, const std::string& msg);

  /**
   * @brief Sets the new logfile file path.
   *
   * @param filepath The filepath where the log messages will be appended. If
   * empty string - nothing will be performed.
   */
  static void logfile(const std::string& filepath);

  /**
   * @brief Sets if the simple logger should print each log message into the
   * stdout.
   *
   * @param toPrintValue New printing boolean value. If the true boolean value
   * given - all the log messages will be duplicated into the stdout.
   */
  static void print(const bool toPrintValue);

  /**
   * @brief Sets the maximum level of log message storage or printing. Above
   * given level all the log messages will be discarded.
   *
   * @param nlvl The new maximum level of log messages. Defaults to
   * SimpleLogger::LVL_INFO
   */
  static void level(const unsigned short& nlvl);

  /**
   * @brief Searches for the string representation of the given log level.
   *
   * @param glvl The numerical log level for it's representation to search.
   *
   * @return Returns non-empty string representation of the given lvl.
   */
  static const std::string& lvl_repr(const unsigned short& glvl);

  /**
   * @brief Init the simple logger class.
   *
   * @param filepath The file path where all the generated by the implemented
   * application messages will be stored in the filesystem. If non empty
   * filepath given and fail to open the file by path - exception is generated.
   * @param nlvl The new maximum log messages level. See the SimpleLogger::level
   * method.
   * @param toPrintValue Defines if simple logger should print messages to the
   * stdout stream. See the SimpleLogger::print for more details.
   */
  static void init(const std::string& filepath = get_default_full_log_path(),
                   const unsigned short& nlvl = MAX_LOG_LEVEL,
                   const bool toPrintValue = true);

 private:
  /**
   * @brief Method to define current log message timestamp.
   * Not a thread safe.
   *
   * @param oss The stringstream which will accept the current time
   * stamp for the log message.
   */
  static void insert_current_timestamp(std::ostringstream& oss);

  static std::string get_full_log_path(const std::string& logname);
  static std::string get_default_full_log_path();

  inline static std::atomic_bool toPrintMsgs{true};
  inline static std::fstream alogfile;
  inline static std::mutex alogfile_m;
  inline static unsigned short lvl{MAX_LOG_LEVEL};
};

}  // namespace simple_logger

#endif  // YOUR_CPP_APP_TEMPLATE_PROJECT_SIMPLE_LOGGER_IMPLEMENTATION_CLASS_H
